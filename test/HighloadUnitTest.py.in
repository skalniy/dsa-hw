from enum import Enum
import filecmp
import random
import os
import unittest

class TestHighload(unittest.TestCase):
    def setUp(self):
        op_count = 2 ** 14
        i_fname, o_fname = "./test.dat", "./test.ans"
        with open(i_fname, 'w', encoding='utf-8') as i_file, \
                open(o_fname, 'w', encoding='utf-8') as o_file:
            OP = Enum('OP', 'ADD DELETE SEARCH')
            key_amp = int(op_count / 2)

            ht = dict()
            for _ in range(op_count):
                op = random.choice(list(OP))
                key = random.randrange(-key_amp, key_amp)
                if op == OP.ADD:
                    data = random.randint(-2**31, 2**31)
                    i_file.write("{0:s} {1:d} {2:d}\n".format("add", key, data))
                    if not key in ht.keys():
                        ht[key] = data
                        o_file.write("true\n")
                    else:
                        o_file.write("false\n")
                elif op == OP.DELETE:
                    i_file.write("{0:s} {1:d}\n".format("delete", key))
                    o_file.write(("true" if ht.pop(key, None) else "false") + '\n')
                elif op == OP.SEARCH:
                    i_file.write("{0:s} {1:d}\n".format("search", key))
                    o_file.write(str(ht.get(key, "null")) + '\n')
                else:
                    exit(-1)

    def tearDown(self):
        os.remove("./test.dat")
        os.remove("./test.ans")
        os.remove("./test.res")

    def test_stl_wrapper(self):
        os.system("@CMAKE_BINARY_DIR@/bin/stl_wrapper ./test.dat ./test.res 2>/dev/null")
        self.assertTrue(filecmp.cmp("./test.res", "./test.ans"))

    def test_chain(self):
        os.system("@CMAKE_BINARY_DIR@/bin/chain ./test.dat ./test.res 2>/dev/null")
        self.assertTrue(filecmp.cmp("./test.res", "./test.ans"))

    def test_cuckoo(self):
        os.system("@CMAKE_BINARY_DIR@/bin/cuckoo ./test.dat ./test.res 2>/dev/null")
        self.assertTrue(filecmp.cmp("./test.res", "./test.ans"))

    def test_double_hash(self):
        os.system("@CMAKE_BINARY_DIR@/bin/double_hash ./test.dat ./test.res 2>/dev/null")
        self.assertTrue(filecmp.cmp("./test.res", "./test.ans"))

if __name__ == "__main__":
    unittest.main()
